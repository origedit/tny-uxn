( emulator of tny by m15o )

|00 @System &vector $2 &expansion $2 &wst $1 &rst $1 &metadata $2 &r $2 &g $2 &b $2 &debug $1 &state $1
|10 @Console &vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1
|20 @Screen &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button $1 &key $1
|a0 @File &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2
|c0 @DateTime &year $2 &month $1 &day $1 &hour $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

|00

@file $30
@ip $1
@psp $1
@rsp $1
@frm $1
@run $1
@opened $1

|0100

@on-reset ( -> )
	
	prng-init
	#0f8f .System/r DEO2
	#0f80 .System/g DEO2
	#0f80 .System/b DEO2
	#0080 .Screen/width DEO2k INC INC DEO2
	;on-controller .Controller/vector DEO2
	.opened LDZ ?&ready
		;on-wait-src .Console/vector DEO2
		.Console/type DEI ?{
			;usage-txt print-str print-cr
			abort DEO
			BRK }
	BRK
&ready
	reset
	BRK

@on-frame ( -> )
	( BRK ) ( debug )
	;ram ( #0000 ADD2 ) LDA eval
	.frm LDZk INC #3c mod SWP STZ
	BRK

@on-controller ( -> )
	.Controller/key DEI
		DUP [ LIT "q ] NEQ ?{ [ LIT 80 .System/state ] DEO }
		DUP [ LIT "r ] NEQ ?{ reset }
		POP ( [ LIT "s ] NEQ ?{ .run LDZ #00 EQU ?{ step } } ) ( debug )
	.Controller/button DEI #00 EQU ?{
		;ram #0001 ADD2 LDA eval }
	BRK

@on-wait-src ( -> )
	.Console/read DEI .file skey ?&ready
	BRK
&ready
	#01 .opened STZ
	#0000 .Console/vector DEO2
	reset
	BRK

@reset ( -- )
	[ LIT2 00 -file ] .File/name DEO2
	#0100 .File/length DEO2
	;ram .File/read DEO2
	.File/success DEI2 ORA ?{
		;file-error-txt print-str print-cr
		abort }
	#0100
		DUP2 ;buffer clear
		;screen clear
	#02 .ip STZ
	#0000 .psp STZ2 ( psp and rsp )
	#00 .frm STZ
	[ LIT2 01 -run ] STZ
	;on-frame .Screen/vector DEO2
	JMP2r

@eval ( addr -- )
	.ip STZ
	[ LIT2 01 -run ] STZ
	&
		step
	.run LDZ ?&
	JMP2r

@step ( -- )
	.ip LDZ DUP INC .ip STZ ( ip )
	#00 SWP ;ram ADD2 LDA ( ins )
	( >> )
@execute ( ins -- )
	DUP #29 LTH ?{
		POP
		;ivalid-ins-txt print-str
		[ LIT2 00 -ip ] LDZ print-hex
		print-cr
		abort }
	#00 SWP #10 SFT2 ( ins*2 )
	;ins-table ADD2 LDA2 JSR2
	( report ) ( debug )
	JMP2r

~ins.tal

@report ( -- )
	.ip LDZ #01 SUB DUP print-hex/b #2018 DEO
	#00 SWP ;ram ADD2 LDA
		#00 SWP #0003 MUL2 ;&ins ADD2
		LDAk #18 DEO
		INC2 LDAk #18 DEO
		INC2 LDA #18 DEO
	print-cr
	.psp LDZ ;pst ;&p report/stack
	.rsp LDZ ;rst ;&r report/stack
	JMP2r
&stack ( len addr* name* -- )
	print-str
	STH2
	DUP ?{ !&end }
	&
		STH2rk LDA print-hex/b #2018 DEO
		#01 SUB DUP ?&
	&end
	POP POP2r
	print-cr
	JMP2r
&ins
	"brk "ret "jmp "jmr
	"jcn "jcr "lit "pop
	"dup "swp "rot "ovr
	"psh "pul "rsi "rsj
	"sta "lda "stb "ldb
	"add "sub "inc "dec
	"mul "div "mod "rnd
	"equ "neq "gth "lth
	"and "orr "xor "sft
	"cls "set "get "key
	"frm
	
&p "pst: 20 $1
&r "rst: 20 $1

@abort ( -> )
	[ LIT2 01 -System/state ] DEO
	BRK

@clear ( len* addr* -- )
	OVR2 ORA ?{ POP2 POP2 JMP2r }
	#0000 ROT2 SUB2 SWP2
	STH2 &
		#00 STH2rk STA INC2r
		INC2 DUP2 ORA ?&
		POP2 POP2r
	JMP2r

@mod ( a b -- c )
	OVR OVR DIV ( a b a/b )
	MUL SUB
	JMP2r

@skey ( key buf -- proc )
	OVR #21 LTH ?&eval
	#00 SWP sput #00 JMP2r
	&eval ( -- )
		POP2 #01 JMP2r

@scap ( str* -- end* )
	!&
	&w ( -- )
		INC2 & LDAk ?&w
	JMP2r

@sput ( chr str* -- )
	scap/ ROT #00 SWP2 STA2
	JMP2r

@print-str ( str* -- )
	&w
		LDAk #19 DEO
		INC2 LDAk ?&w
	POP2 JMP2r

@print-hex ( short* -- )
	SWP print-hex/b
	&b ( -- )
		DUP #04 SFT print-hex/c
	&c ( -- )
		#0f AND DUP #09 GTH #27 MUL ADD [ LIT "0 ] ADD #18 DEO
		JMP2r

@print-cr ( -- )
	[ LIT2 0a -Console/write ] DEO
	JMP2r

@prng-init ( -- )

	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour DEI #04 SFT2
	#00 .DateTime/day DEI #10 SFT2 EOR2
	#00 .DateTime/month DEI #60 SFT2 EOR2
		.DateTime/year DEI2 #a0 SFT2 EOR2 ,prng/y STR2

JMP2r

@prng ( -- number* )

	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP

JMP2r

@ram $100
@buffer $100
@pst $100
@rst $100
@screen $100 ( 1 byte per pixel )

@usage-txt "usage: 20 "tnyemu 20 "program.rom $1
@file-error-txt "failed 20 "to 20 "read 20 "program $1
@ivalid-ins-txt "invalid 20 "instruction 20 "at 20 $1
@div-zero-txt "division 20 "by 20 "zero $1
@pst-underflow-txt "data 20 "stack 20 "underflow $1
@pst-overflow-txt "data 20 "stack 20 "overflow $1
@rst-underflow-txt "return 20 "stack 20 "underflow $1
@rst-overflow-txt "return 20 "stack 20 "overflow $1

@pixel-icn
	ffff ffff ffff ffff
